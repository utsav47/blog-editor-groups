
Let’s say that you want to put all of the content of a text file into a variable so that you can access it later. This is a good introduction to file access, because it shows all of the basic steps. Here’s how you would place the contents of file.txt into the $file_data variable:
<?php
$file_data = '';
$fd = fopen('file.txt', 'r'); if (!$fd) {    echo "Error! Couldn't open the file.";    die; } 
while (! feof($fd)) {    $file_data .= fgets($fd, 5000);
www.it-ebooks.info
94 Chapter 7
}
fclose($fd); 
?>






The fopen() function is an essential first step in most file access. It acts as a gateway between the system and PHP. When opening a file, you specify how you want to access the file. In this case, we open it for read access. You can also open a file for write access. fopen() returns a resource ID that you use with other functions to perform file operations. In this case, we use fgets() and feof() to do the actual work. fopen() has two parameters: the file’s path and the mode. Here are the commonly useful modes (keep in mind that any of these can fail if you don’t have the proper permissions for it). 
r Open for reading only; start from the beginning of the file. w Open for writing only (see the following section); start from the beginning of the file, and erase the contents of the file. If the file does not exist, attempt to create it. x Create and open for writing only; start from the beginning of the file. If the file already exists, the fopen() call returns false. This option is supported in PHP 4.3.2 and later. a- Open for writing only; start at the end of the file. If the file does not exist, attempt to create it.
The following file operations open the file for both reading and writing. Don’t use them unless you really know what you’re doing:
w+ Open for reading and writing; start from the beginning of the file, and erase the contents of the file if it has any. If the file does not exist, attempt to create it. r+ Open for reading and writing; start from the beginning of the file. a+ Open for reading and writing; start at the end of the file. If the file does not exist, attempt to create it. x+ Create and open for reading and writing; start from the beginning of the file. If the file already exists, the fopen() function call returns false. This option is supported in PHP 4.3.2 and later.
Getting back to the script, $fd = fopen('file.txt', 'r') means Open this file to read only and assign the resource ID to $fd. To see if the open worked correctly, we just see if $fd has a value. Now we’re ready to do the real work in a loop. The feof() function tells us when we’ve hit the end of the file, so we use that as a test condition to break the loop. The fgets() function call here retrieves the next line of the file, up to 5,000 bytes’ worth at a time. We append that to $file_data. When finished, we use fclose($fd) to free system resources and tell the system that we’re finished with file access. 
www.it-ebooks.info
Working with Files 95
Hacking the Script Many scripts process file data line by line instead of saving it into one huge variable. This comes up fairly often, especially when you’re looking at lists of items generated by other programs. (“#55: Reading a Comma-Separated File” on page 101 shows you an example of when you’d want to examine each line individually.) To do this, just change the inside of the loop, as in this example, which prints every line that matches bob.
while (! feof($fd)) {    $file_data = fgets($fd, 5000);    if (strstr($file_data, 'bob') !== FALSE) {        print $file_data;    } }
Notice how the .= append operator from the original script changed to the = assignment operator here. It’s subtle but very important. Depending on how your server is configured, you may be able to use fopen() to read data from a URL, such as this: 
$fr = fopen('http://www.yahoo.com', 'r');
However, if you’re running your own server, you should be very careful about allowing fopen() to access files outside your website; some PHP-specific worms have used fopen() in very nasty ways. Essentially, you have to be very careful about filenames—make sure that the user doesn’t have any say in the filenames that fopen() accesses! You can shut down fopen() by setting allow_url_fopen to false, as shown in “Configuration Settings and the php.ini File” on page 20. For a more powerful alternative, use cURL to access websites, as shown in Chapter 11. 
What Can Go Wrong? The most common error occurs when PHP does not have permission to read the file. There are some files that PHP just shouldn’t look at (password files, for example), and you may get an error message if you try to open one of these. Check the permissions, as shown in “File Permissions” on page 91. This leads to discussion of a bigger issue: never, ever allow a user to open a file before verifying that the user has any business opening that file. Remember that you can’t trust what the user is going to send to you. If you base filenames too closely on user data, it’s entirely possible that a user could access any file on your site. Essentially, you need rules that absolutely restrict directory access for files on your site. You should also verify data from files that users attempt to upload. See “#54: Uploading Images to a Directory” on page 97 for an example of how to verify file type, location, size, and more.
www.it-ebooks.info
96 Chapter 7
#51: Creating and Writing to a File